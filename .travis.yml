dist: xenial
os: linux
language: shell
stages:
  - name: "Test, Build and Deploy"
    if: branch =~ ^master$|^development$|^release
jobs:
  include:
    - stage: "Test, Build and Deploy"
      name: "Lint, Unit Test, Build and Deploy"
      language: node_js
      node_js: 14
      before_install: |-
        set -e
        ## use auto incremental travis build number for image tag for version comparison
        tag_build_num="v${TRAVIS_BUILD_NUMBER}-build"
      install: |-
        export IMAGE="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_NAME}:$tag_build_num"
        export IMAGE_LATEST="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_NAME}:latest"
        export IMAGE_MIGRATION="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_MIGRATION_ECR_NAME}:$tag_build_num"
        export IMAGE_MIGRATION_LATEST="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_MIGRATION_ECR_NAME}:latest"
      before_script: |
        git config user.email "builds@travis-ci.com"
        git config user.name "Travis CI"
      script: |-
        echo 'start scripts'
      deploy:
        ## upload to ecr
        - provider: script
          script: >-
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
            && unzip /tmp/awscliv2.zip -d /tmp
            && sudo /tmp/aws/install
            && aws configure set region "${AWS_REGION}"
            && aws configure set output json
            && aws configure set aws_access_key_id "${AWS_ECR_ACCESS_KEY_ID}"
            && aws configure set aws_secret_access_key "${AWS_ECR_SECRET_ACCESS_KEY}"
            && aws ecr get-login-password --region ${AWS_REGION}| docker login --username AWS --password-stdin ${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
            && aws ssm send-command --document-name "Deploy-RunDeployCommand" --document-version "1" --targets '[{"Key":"tag:IsSSMAgent","Values":["true"]}]' --parameters '{"ServerName":["tapnow-service"],"Environment":["staging"],"TimeoutSeconds":["3600"]}' --timeout-seconds 600 --max-concurrency "50" --max-errors "0" --region "${AWS_REGION}"
            && aws ssm send-command --document-name "Deploy-ClearUntaggedImages" --document-version "1" --targets '[{"Key":"tag:IsSSMAgent","Values":["true"]}]' --parameters '{"repositoryName":["tapnow-service"],"TimeoutSeconds":["3600"]}' --timeout-seconds 600 --max-concurrency "50" --max-errors "0" --region "${AWS_REGION}"
          cleanup: false
          on:
            all_branches: true
            condition: $REPO_SKIP_DEPLOY != "true"
